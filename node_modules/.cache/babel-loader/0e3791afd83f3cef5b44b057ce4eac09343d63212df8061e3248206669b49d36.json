{"ast":null,"code":"import jsLevenshtein from \"@bundled-es-modules/js-levenshtein\";\nimport { HttpHandler } from '../../handlers/HttpHandler.mjs';\nimport { GraphQLHandler } from '../../handlers/GraphQLHandler.mjs';\nimport { parseGraphQLRequest } from '../internal/parseGraphQLRequest.mjs';\nimport { getPublicUrlFromRequest } from './getPublicUrlFromRequest.mjs';\nimport { isStringEqual } from '../internal/isStringEqual.mjs';\nimport { devUtils } from '../internal/devUtils.mjs';\nconst getStringMatchScore = jsLevenshtein;\nconst MAX_MATCH_SCORE = 3;\nconst MAX_SUGGESTION_COUNT = 4;\nconst TYPE_MATCH_DELTA = 0.5;\nfunction groupHandlersByType(handlers) {\n  return handlers.reduce((groups, handler) => {\n    if (handler instanceof HttpHandler) {\n      groups.http.push(handler);\n    }\n    if (handler instanceof GraphQLHandler) {\n      groups.graphql.push(handler);\n    }\n    return groups;\n  }, {\n    http: [],\n    graphql: []\n  });\n}\nfunction getHttpHandlerScore() {\n  return (request, handler) => {\n    const {\n      path,\n      method\n    } = handler.info;\n    if (path instanceof RegExp || method instanceof RegExp) {\n      return Infinity;\n    }\n    const hasSameMethod = isStringEqual(request.method, method);\n    const methodScoreDelta = hasSameMethod ? TYPE_MATCH_DELTA : 0;\n    const requestPublicUrl = getPublicUrlFromRequest(request);\n    const score = getStringMatchScore(requestPublicUrl, path);\n    return score - methodScoreDelta;\n  };\n}\nfunction getGraphQLHandlerScore(parsedQuery) {\n  return (_, handler) => {\n    if (typeof parsedQuery.operationName === \"undefined\") {\n      return Infinity;\n    }\n    const {\n      operationType,\n      operationName\n    } = handler.info;\n    if (typeof operationName !== \"string\") {\n      return Infinity;\n    }\n    const hasSameOperationType = parsedQuery.operationType === operationType;\n    const operationTypeScoreDelta = hasSameOperationType ? TYPE_MATCH_DELTA : 0;\n    const score = getStringMatchScore(parsedQuery.operationName, operationName);\n    return score - operationTypeScoreDelta;\n  };\n}\nfunction getSuggestedHandler(request, handlers, getScore) {\n  const suggestedHandlers = handlers.reduce((suggestions, handler) => {\n    const score = getScore(request, handler);\n    return suggestions.concat([[score, handler]]);\n  }, []).sort((_ref, _ref2) => {\n    let [leftScore] = _ref;\n    let [rightScore] = _ref2;\n    return leftScore - rightScore;\n  }).filter(_ref3 => {\n    let [score] = _ref3;\n    return score <= MAX_MATCH_SCORE;\n  }).slice(0, MAX_SUGGESTION_COUNT).map(_ref4 => {\n    let [, handler] = _ref4;\n    return handler;\n  });\n  return suggestedHandlers;\n}\nfunction getSuggestedHandlersMessage(handlers) {\n  if (handlers.length > 1) {\n    return `Did you mean to request one of the following resources instead?\n\n${handlers.map(handler => `  \\u2022 ${handler.info.header}`).join(\"\\n\")}`;\n  }\n  return `Did you mean to request \"${handlers[0].info.header}\" instead?`;\n}\nasync function onUnhandledRequest(request, handlers) {\n  let strategy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"warn\";\n  const parsedGraphQLQuery = await parseGraphQLRequest(request).catch(() => null);\n  const publicUrl = getPublicUrlFromRequest(request);\n  function generateHandlerSuggestion() {\n    const handlerGroups = groupHandlersByType(handlers);\n    const relevantHandlers = parsedGraphQLQuery ? handlerGroups.graphql : handlerGroups.http;\n    const suggestedHandlers = getSuggestedHandler(request, relevantHandlers, parsedGraphQLQuery ? getGraphQLHandlerScore(parsedGraphQLQuery) : getHttpHandlerScore());\n    return suggestedHandlers.length > 0 ? getSuggestedHandlersMessage(suggestedHandlers) : \"\";\n  }\n  function getGraphQLRequestHeader(parsedGraphQLRequest) {\n    if (!parsedGraphQLRequest?.operationName) {\n      return `anonymous ${parsedGraphQLRequest?.operationType} (${request.method} ${publicUrl})`;\n    }\n    return `${parsedGraphQLRequest.operationType} ${parsedGraphQLRequest.operationName} (${request.method} ${publicUrl})`;\n  }\n  function generateUnhandledRequestMessage() {\n    const requestHeader = parsedGraphQLQuery ? getGraphQLRequestHeader(parsedGraphQLQuery) : `${request.method} ${publicUrl}`;\n    const handlerSuggestion = generateHandlerSuggestion();\n    const messageTemplate = [`intercepted a request without a matching request handler:`, `  \\u2022 ${requestHeader}`, handlerSuggestion, `If you still wish to intercept this unhandled request, please create a request handler for it.\nRead more: https://mswjs.io/docs/getting-started/mocks`].filter(Boolean);\n    return messageTemplate.join(\"\\n\\n\");\n  }\n  function applyStrategy(strategy2) {\n    const message = generateUnhandledRequestMessage();\n    switch (strategy2) {\n      case \"error\":\n        {\n          devUtils.error(\"Error: %s\", message);\n          throw new Error(devUtils.formatMessage('Cannot bypass a request when using the \"error\" strategy for the \"onUnhandledRequest\" option.'));\n        }\n      case \"warn\":\n        {\n          devUtils.warn(\"Warning: %s\", message);\n          break;\n        }\n      case \"bypass\":\n        break;\n      default:\n        throw new Error(devUtils.formatMessage('Failed to react to an unhandled request: unknown strategy \"%s\". Please provide one of the supported strategies (\"bypass\", \"warn\", \"error\") or a custom callback function as the value of the \"onUnhandledRequest\" option.', strategy2));\n    }\n  }\n  if (typeof strategy === \"function\") {\n    strategy(request, {\n      warning: applyStrategy.bind(null, \"warn\"),\n      error: applyStrategy.bind(null, \"error\")\n    });\n    return;\n  }\n  applyStrategy(strategy);\n}\nexport { onUnhandledRequest };","map":{"version":3,"mappings":"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","names":["jsLevenshtein","HttpHandler","GraphQLHandler","parseGraphQLRequest","getPublicUrlFromRequest","isStringEqual","devUtils","getStringMatchScore","MAX_MATCH_SCORE","MAX_SUGGESTION_COUNT","TYPE_MATCH_DELTA","groupHandlersByType","handlers","reduce","groups","handler","http","push","graphql","getHttpHandlerScore","request","path","method","info","RegExp","Infinity","hasSameMethod","methodScoreDelta","requestPublicUrl","score","getGraphQLHandlerScore","parsedQuery","_","operationName","operationType","hasSameOperationType","operationTypeScoreDelta","getSuggestedHandler","getScore","suggestedHandlers","suggestions","concat","sort","leftScore","rightScore","filter","slice","map","getSuggestedHandlersMessage","length","header","join","onUnhandledRequest","strategy","parsedGraphQLQuery","catch","publicUrl","generateHandlerSuggestion","handlerGroups","relevantHandlers","getGraphQLRequestHeader","parsedGraphQLRequest","generateUnhandledRequestMessage","requestHeader","handlerSuggestion","messageTemplate","Boolean","applyStrategy","message","error","Error","formatMessage","warn","warning","bind"],"sources":["/Users/ditole/Desktop/projects/starting_codepets/node_modules/msw/src/core/utils/request/onUnhandledRequest.ts"],"sourcesContent":["import jsLevenshtein from '@bundled-es-modules/js-levenshtein'\nimport { RequestHandler } from '../../handlers/RequestHandler'\nimport { HttpHandler } from '../../handlers/HttpHandler'\nimport { GraphQLHandler } from '../../handlers/GraphQLHandler'\nimport {\n  ParsedGraphQLQuery,\n  ParsedGraphQLRequest,\n  parseGraphQLRequest,\n} from '../internal/parseGraphQLRequest'\nimport { getPublicUrlFromRequest } from './getPublicUrlFromRequest'\nimport { isStringEqual } from '../internal/isStringEqual'\nimport { devUtils } from '../internal/devUtils'\n\nconst getStringMatchScore = jsLevenshtein\n\nconst MAX_MATCH_SCORE = 3\nconst MAX_SUGGESTION_COUNT = 4\nconst TYPE_MATCH_DELTA = 0.5\n\nexport interface UnhandledRequestPrint {\n  warning(): void\n  error(): void\n}\n\nexport type UnhandledRequestCallback = (\n  request: Request,\n  print: UnhandledRequestPrint,\n) => void\n\nexport type UnhandledRequestStrategy =\n  | 'bypass'\n  | 'warn'\n  | 'error'\n  | UnhandledRequestCallback\n\ninterface RequestHandlerGroups {\n  http: Array<HttpHandler>\n  graphql: Array<GraphQLHandler>\n}\n\nfunction groupHandlersByType(\n  handlers: Array<RequestHandler>,\n): RequestHandlerGroups {\n  return handlers.reduce<RequestHandlerGroups>(\n    (groups, handler) => {\n      if (handler instanceof HttpHandler) {\n        groups.http.push(handler)\n      }\n\n      if (handler instanceof GraphQLHandler) {\n        groups.graphql.push(handler)\n      }\n\n      return groups\n    },\n    {\n      http: [],\n      graphql: [],\n    },\n  )\n}\n\ntype RequestHandlerSuggestion = [number, RequestHandler]\n\ntype ScoreGetterFn<RequestHandlerType extends RequestHandler> = (\n  request: Request,\n  handler: RequestHandlerType,\n) => number\n\nfunction getHttpHandlerScore(): ScoreGetterFn<HttpHandler> {\n  return (request, handler) => {\n    const { path, method } = handler.info\n\n    if (path instanceof RegExp || method instanceof RegExp) {\n      return Infinity\n    }\n\n    const hasSameMethod = isStringEqual(request.method, method)\n\n    // Always treat a handler with the same method as a more similar one.\n    const methodScoreDelta = hasSameMethod ? TYPE_MATCH_DELTA : 0\n    const requestPublicUrl = getPublicUrlFromRequest(request)\n    const score = getStringMatchScore(requestPublicUrl, path)\n\n    return score - methodScoreDelta\n  }\n}\n\nfunction getGraphQLHandlerScore(\n  parsedQuery: ParsedGraphQLQuery,\n): ScoreGetterFn<GraphQLHandler> {\n  return (_, handler) => {\n    if (typeof parsedQuery.operationName === 'undefined') {\n      return Infinity\n    }\n\n    const { operationType, operationName } = handler.info\n\n    if (typeof operationName !== 'string') {\n      return Infinity\n    }\n\n    const hasSameOperationType = parsedQuery.operationType === operationType\n    // Always treat a handler with the same operation type as a more similar one.\n    const operationTypeScoreDelta = hasSameOperationType ? TYPE_MATCH_DELTA : 0\n    const score = getStringMatchScore(parsedQuery.operationName, operationName)\n\n    return score - operationTypeScoreDelta\n  }\n}\n\nfunction getSuggestedHandler(\n  request: Request,\n  handlers: Array<HttpHandler> | Array<GraphQLHandler>,\n  getScore: ScoreGetterFn<HttpHandler> | ScoreGetterFn<GraphQLHandler>,\n): Array<RequestHandler> {\n  const suggestedHandlers = (handlers as Array<RequestHandler>)\n    .reduce<Array<RequestHandlerSuggestion>>((suggestions, handler) => {\n      const score = getScore(request, handler as any)\n      return suggestions.concat([[score, handler]])\n    }, [])\n    .sort(([leftScore], [rightScore]) => leftScore - rightScore)\n    .filter(([score]) => score <= MAX_MATCH_SCORE)\n    .slice(0, MAX_SUGGESTION_COUNT)\n    .map(([, handler]) => handler)\n\n  return suggestedHandlers\n}\n\nfunction getSuggestedHandlersMessage(handlers: RequestHandler[]) {\n  if (handlers.length > 1) {\n    return `\\\nDid you mean to request one of the following resources instead?\n\n${handlers.map((handler) => `  • ${handler.info.header}`).join('\\n')}`\n  }\n\n  return `Did you mean to request \"${handlers[0].info.header}\" instead?`\n}\n\nexport async function onUnhandledRequest(\n  request: Request,\n  handlers: Array<RequestHandler>,\n  strategy: UnhandledRequestStrategy = 'warn',\n): Promise<void> {\n  const parsedGraphQLQuery = await parseGraphQLRequest(request).catch(\n    () => null,\n  )\n  const publicUrl = getPublicUrlFromRequest(request)\n\n  function generateHandlerSuggestion(): string {\n    /**\n     * @note Ignore exceptions during GraphQL request parsing because at this point\n     * we cannot assume the unhandled request is a valid GraphQL request.\n     * If the GraphQL parsing fails, just don't treat it as a GraphQL request.\n     */\n    const handlerGroups = groupHandlersByType(handlers)\n    const relevantHandlers = parsedGraphQLQuery\n      ? handlerGroups.graphql\n      : handlerGroups.http\n\n    const suggestedHandlers = getSuggestedHandler(\n      request,\n      relevantHandlers,\n      parsedGraphQLQuery\n        ? getGraphQLHandlerScore(parsedGraphQLQuery)\n        : getHttpHandlerScore(),\n    )\n\n    return suggestedHandlers.length > 0\n      ? getSuggestedHandlersMessage(suggestedHandlers)\n      : ''\n  }\n\n  function getGraphQLRequestHeader(\n    parsedGraphQLRequest: ParsedGraphQLRequest<any>,\n  ): string {\n    if (!parsedGraphQLRequest?.operationName) {\n      return `anonymous ${parsedGraphQLRequest?.operationType} (${request.method} ${publicUrl})`\n    }\n\n    return `${parsedGraphQLRequest.operationType} ${parsedGraphQLRequest.operationName} (${request.method} ${publicUrl})`\n  }\n\n  function generateUnhandledRequestMessage(): string {\n    const requestHeader = parsedGraphQLQuery\n      ? getGraphQLRequestHeader(parsedGraphQLQuery)\n      : `${request.method} ${publicUrl}`\n    const handlerSuggestion = generateHandlerSuggestion()\n\n    const messageTemplate = [\n      `intercepted a request without a matching request handler:`,\n      `  \\u2022 ${requestHeader}`,\n      handlerSuggestion,\n      `\\\nIf you still wish to intercept this unhandled request, please create a request handler for it.\nRead more: https://mswjs.io/docs/getting-started/mocks\\\n`,\n    ].filter(Boolean)\n    return messageTemplate.join('\\n\\n')\n  }\n\n  function applyStrategy(strategy: UnhandledRequestStrategy) {\n    // Generate handler suggestions only when applying the strategy.\n    // This saves bandwidth for scenarios when developers opt-out\n    // from the default unhandled request handling strategy.\n    const message = generateUnhandledRequestMessage()\n\n    switch (strategy) {\n      case 'error': {\n        // Print a developer-friendly error.\n        devUtils.error('Error: %s', message)\n\n        // Throw an exception to halt request processing and not perform the original request.\n        throw new Error(\n          devUtils.formatMessage(\n            'Cannot bypass a request when using the \"error\" strategy for the \"onUnhandledRequest\" option.',\n          ),\n        )\n      }\n\n      case 'warn': {\n        devUtils.warn('Warning: %s', message)\n        break\n      }\n\n      case 'bypass':\n        break\n\n      default:\n        throw new Error(\n          devUtils.formatMessage(\n            'Failed to react to an unhandled request: unknown strategy \"%s\". Please provide one of the supported strategies (\"bypass\", \"warn\", \"error\") or a custom callback function as the value of the \"onUnhandledRequest\" option.',\n            strategy,\n          ),\n        )\n    }\n  }\n\n  if (typeof strategy === 'function') {\n    strategy(request, {\n      warning: applyStrategy.bind(null, 'warn'),\n      error: applyStrategy.bind(null, 'error'),\n    })\n    return\n  }\n\n  applyStrategy(strategy)\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}